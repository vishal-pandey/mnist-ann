# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ekO-e3pVYKOD3Jwd2Wow8iTQxd83c6ey
"""

import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import tensorflow as tf
learn = tf.contrib.learn
tf.logging.set_verbosity(tf.logging.ERROR)

mnist = learn.datasets.load_dataset('mnist')
data = mnist.train.images
labels = np.asarray(mnist.train.labels, dtype=np.int32)
test_data = mnist.test.images
test_labels = np.asarray(mnist.test.labels, dtype=np.int32)

# max_examples = 3000
# data = data[:max_examples]
# labels = labels[:max_examples]

# test_data = test_data[:10000]
# test_labels = test_labels[:10000]

# print(len(test_data))

def display(i):
    img = data[i]
    plt.title('Example %d. Label: %d' % (i, labels[i]))
    plt.imshow(img.reshape((28,28)), cmap=plt.cm.gray_r)

display(999)

def d_label(i):
    op = []
    for j in range(0,10):
        if j == labels[i]:
            op.append(1)
        else:
            op.append(0)
    return(op)

d_label(999)

w_data = []
for j in range(0,10):
    np.random.seed(0)
    weights = np.random.random((784,1))
    w_data.append(weights)

print(len(data[0]))

print(w_data[0][0][0])

def actual_output(i):
    aop = []
    for j in range(0,10):
        d = np.dot(data[i], w_data[j])
        sigmoid = 1/(1+np.exp(-d[0]))
#         aop.append(d[0]/784)
        aop.append(sigmoid)
    return aop

def update_cell_weight(i, error, k):
#     print(w_data[i][263])
#     print("\n\n")

    LEARNING_RATE = 0.05
    for j in range(0,784):
        w_data[i][j][0] += LEARNING_RATE * data[k][j] * error
#     print(w_data[i][263])

    
def train(i):

    a_op = actual_output(i)
    i_op = d_label(i)
    a_op = np.asarray(a_op)
    i_op = np.asarray(i_op)
    error = np.subtract(i_op,a_op)
    
#     print(a_op)
#     print(i_op)
#     print(error)
    
    for j in range(0,10):
        update_cell_weight(j, error[j], i)
    
#     update_cell_weight(labels[i])

# train(1)
progress = 0
for i in range(0,len(data)):
    train(i)
    if progress < i/len(data)*100:
      progress += 1
      print(progress)

# print(np.dot(data[99], weights))

print(actual_output(0))
display(0)

def display_test(i):
    img = test_data[i]
    plt.title('Example %d. Label: %d' % (i, test_labels[i]))
    plt.imshow(img.reshape((28,28)), cmap=plt.cm.gray_r)

def prediction_ratio():
    result = []
    for k in range(0,len(test_data)):
        aop = []
        for j in range(0,10):
            d = np.dot(test_data[k], w_data[j])
            aop.append(d[0]/784)
        if aop.index(max(aop)) == test_labels[k]:
            result.append(1)
        else:
            result.append(0)
    return result
#     return aop.index(aop.)

X = prediction_ratio()

ones = 0
for i in range(0,len(test_data)):
    if X[i] == 1:
        ones+=1
print(ones/len(test_data)*100)
print(len(test_data))

# print(w_data[0])
# for i in range(0,10):
zero = w_data[3]
zero = zero.T
plt.title('Example 0. Label: 0')
plt.imshow(zero.reshape((28,28)), cmap=plt.cm.gray_r)

print(w_data)

